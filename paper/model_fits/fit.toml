equal_loss = true
validation_batch_size = 1

[data]
__call__ = ["niarb.io", "load_data"]
paths = ["data/space_bin60_max550.pkl", "data/ori_bin25.pkl"]

[dataset]
abs_window = [600.0, 600.0]
subsample = 2500
sample_target = true
N_instantiations = 1

[dataset.neurons]
N = 24000
variables = ["cell_type", "space", "ori"]
cell_types = ["PYR", "PV"]
cell_probs = [0.85, 0.15]
space_extent = [900.0, 900.0]
min_dist = 3.0
w_dims = []

[dataset.perturbations.configs.__matrix__]
N = [1]
cell_probs = [{ PYR = 1.0 }]
space = [["uniform", [550.0, 550.0]]]
repeats = [10]

[dataset.metrics]
distance = "min_distance_to_ensemble"
rel_ori = "abs_relative_ori"

[validation_dataset]
abs_window = [600.0, 600.0]
N_instantiations = 10

[validation_dataset.neurons]
N = 24000
variables = ["cell_type", "space", "ori"]
cell_types = ["PYR", "PV"]
cell_probs = [0.85, 0.15]
space_extent = [900.0, 900.0]
min_dist = 3.0
w_dims = []

[validation_dataset.perturbations.configs.__matrix__]
N = [1]
cell_probs = [{ PYR = 1.0 }]
space = [["uniform", [550.0, 550.0]]]
repeats = [5]

[validation_dataset.metrics]
distance = "min_distance_to_ensemble"
rel_ori = "abs_relative_ori"

[pipeline.model]
__call__ = ["niarb.nn", "V1"]
variables = ["cell_type", "space", "ori"]
cell_types = ["PYR", "PV"]
tau = [1.0, 0.5]
sigma_bounds = [[[75, 175], [128, 172]], [[92, 128], [75, 175]]]
kappa_bounds = [
    [[0.09, 0.3], [-0.5, 0.5]],
    [[-0.5, 0.5], [-0.5, 0.5]],
]
gW_bounds = [1e-5, 10]
init_stable = true

[validation_pipeline.model]
__call__ = ["niarb.nn", "V1"]
variables = ["cell_type", "space", "ori"]
cell_types = ["PYR", "PV"]
tau = [1.0, 0.5]
mode = "numerical"
simulation_kwargs = { options = { max_num_steps = 1000 }, dx_rtol = 1e-5 }

[optimizer]
options = { maxiter = 500 }

# overall stability
[[optimizer.constraints]]
__call__ = ["niarb.optimize.constraint", "StabilityCon"]
eps = 0.01

# unstable PYR subcircuit
[[optimizer.constraints]]
__call__ = ["niarb.optimize.constraint", "StabilityCon"]
cell_types = ["PYR"]
stable = false
eps = 0.01

# constraint diagonal sigma to be greater than off diagonal sigma
[[optimizer.constraints]]
__call__ = ["niarb.optimize.constraint", "EISigmaDiagCon"]

